// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import cars "fcg/cars"
import mock "github.com/stretchr/testify/mock"

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Create provides a mock function with given fields: carMap
func (_m *Repository) Create(carMap map[string]interface{}) (string, error) {
	ret := _m.Called(carMap)

	var r0 string
	if rf, ok := ret.Get(0).(func(map[string]interface{}) string); ok {
		r0 = rf(carMap)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(map[string]interface{}) error); ok {
		r1 = rf(carMap)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ID
func (_m *Repository) Delete(ID string) error {
	ret := _m.Called(ID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(ID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields:
func (_m *Repository) GetAll() ([]*cars.Car, error) {
	ret := _m.Called()

	var r0 []*cars.Car
	if rf, ok := ret.Get(0).(func() []*cars.Car); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*cars.Car)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ID
func (_m *Repository) GetByID(ID string) (*cars.Car, error) {
	ret := _m.Called(ID)

	var r0 *cars.Car
	if rf, ok := ret.Get(0).(func(string) *cars.Car); ok {
		r0 = rf(ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cars.Car)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
